Arifur Rahman 
Systems Programming PA5- test plan

Instructions for testing:
 - In order for the programs to work, client processes must specify the name of the machine where the client expects to find the server process as a command line argument
 - The server takes no command line arguments.
There are a number of cases to test the program 
1) Test for trying to connect to server while on another computer.
2)Connecting to server successfully
3)Connecting to server unsucessfully 
4) normal functions (opening, starting,crediting,debiting, printing balance)
5)trying to open account name with over 100 characters
6)Trying to debit amount that is greater than total balance
7)trying to open account with a name that already exists
8)Trying to start an account while running already on another client
9)Trying to start an account that doesn't exist 
10)opening multiple accounts after finishing 
11) trying to close client
12) trying to close server
13) Exiting the client using exit.

Test cases are handled by the following code
int
main( int argc, char ** argv )
{
	int					sd;
	char				message[256];
	int 				*rfdptr, *pfdptr;

	if ( argc < 2 )
	{
		fprintf( stderr, "\x1b[1;31mNo host name specified.  File %s line %d.\x1b[0m\n", __FILE__, __LINE__ );
		exit( 1 );
	}
	else if ( (sd = connect_to_server( argv[1], PORT_NUM )) == -1 )
	{
		write( 1, message, sprintf( message,  "\x1b[1;31mCould not connect to server %s errno %s\x1b[0m\n", argv[1], strerror( errno ) ) );
		return 1;
	}
	else
	{
		printf( "Connected to server %s\n", argv[1] );
		//Create threads here to read commands from user and send commands to server
		if ( pthread_attr_init( &reader_attr ) != 0  || pthread_attr_init( &printer_attr ) != 0 )
		{
			printf( "pthread_attr_init() failed in file %s line %d\n", __FILE__, __LINE__ );
			return 0;
		}
		else if ( pthread_attr_setscope( &reader_attr, PTHREAD_SCOPE_SYSTEM ) != 0 || pthread_attr_setscope( &printer_attr, PTHREAD_SCOPE_SYSTEM ) != 0 )
		{
			printf( "pthread_attr_setscope() failed in file %s line %d\n", __FILE__, __LINE__ );
			return 0;
		}
		
		rfdptr = (int *)malloc( sizeof(int) );
		pfdptr = (int *)malloc( sizeof(int) );
		*rfdptr = *pfdptr = sd;
		if ( pthread_create( &rtid, &reader_attr, read_input, rfdptr ) != 0 || pthread_create( &ptid, &printer_attr, print_output, pfdptr ) != 0 )
		{
			printf( "pthread_create() failed in file %s line %d\n", __FILE__, __LINE__ );
			return 0;
		}
		
		pthread_join( ptid, NULL );
		
		printf("Session Ended.\n");

int
main( int argc, char ** argv )
{
	int					sd;
	char				message[256];
	pthread_t			tid;
	pthread_attr_t		kernel_attr;
	socklen_t			ic;
	int					fd;
	struct sockaddr_in	senderAddr;
	int *				fdptr;
	
	if( buildDaBank(&daBank) != 0){
		printf("DESTROYED: The Avengers were unable to save this bank.\n");
		return 0;
	}

	//This was an if in Russel's code
	else if ( pthread_attr_init( &kernel_attr ) != 0 )
	{
		printf( "pthread_attr_init() failed in file %s line %d\n", __FILE__, __LINE__ );
		return 0;
	}
	else if ( pthread_attr_setscope( &kernel_attr, PTHREAD_SCOPE_SYSTEM ) != 0 )
	{
		printf( "pthread_attr_setscope() failed in file %s line %d\n", __FILE__, __LINE__ );
		return 0;
	}
	else if ( (sd = claim_port( PORT_NUM )) == -1 )
	{
		write( 1, message, sprintf( message,  "\x1b[1;31mCould not bind to port %s errno %s\x1b[0m\n", PORT_NUM, strerror( errno ) ) );
		return 1;
	}
	else if ( listen( sd, 20 ) == -1 ) //lowered this on Russell's instruction
	{
		printf( "listen() failed in file %s line %d\n", __FILE__, __LINE__ );
		close( sd );
		return 0;
	}
	else
	{
		//Create print out all accounts thread
		if ( pthread_create( &tid, &kernel_attr, printBank, NULL ) != 0 )
			{
				printf( "pthread_create() failed in file %s line %d\n", __FILE__, __LINE__ );
				return 0;
			}
			
		ic = sizeof(senderAddr);
		while ( (fd = accept( sd, (struct sockaddr *)&senderAddr, &ic )) != -1 )
		{
			fdptr = (int *)malloc( sizeof(int) );
			*fdptr = fd;					// pointers are not the same size as ints any more.
			if ( pthread_create( &tid, &kernel_attr, client_session_thread, fdptr ) != 0 )
			{
				printf( "pthread_create() failed in file %s line %d\n", __FILE__, __LINE__ );
				return 0;

